
%%   mermaid-diagram
flowchart TB
    subgraph Factors["Game Constants"]
        ExistingCat["Currently Playing Cats at the Goodie"] --> CatRelations["Cat Relationship Modifier<br>aka Cat vs cat weights<br>aka Cat Interaction"]
        DamageState["Goodie Damage State"] --> PlayspaceOnCat["Playspace Cat Attraction Weights<br>aka Cat weights"]
        PlayspaceConflicts["Playspace Conflicting Playspaces<br> aka Conflicts"]
        FoodType["Food Type"] --> Food["Cat Visit Chance<br>aka Food Staying Power<br>aka Cat Food Multiplier"]
        Charm["Playspace Charm"]
        Weather["Weather Condition<br>aka Season"]-->PlayspaceWeather["Playspace Weather Modifier"]
        CatWeather["Cat Seasonal Modifier Factor"]
    end

    subgraph VisitCalculations["Visit Calculations"]
        CatSelect["Cat Selection<br><br>The algo first selects one cat.<br><br>1. (Compute cat relationship modifier) For each of the cat weight, multply it by (100 + the sum of all the other playing cats' cat vs cat weights)%.<br>2. Do a weighted draw using the new weights."] --> 
        CanCatVisit{"Can this cat visit?<br><br>All conditions below must be true.<br>- Playspace is empty.<br>- Playspace conflicting spaces are empty.<br>- NOT(Playspace is food AND playspace is indoors) (indoor food does not attract cats).<br>- Selected cat is not in cooldown.<br>- Selected cat is not playing in other places."}
        CanCatVisit --> |Yes| VisitProb["Visit Probability<br><br>The game then determines if selected cat will visit.<br><br>The chance is given by (Visit Chance)% <br> * (Playspace Charm)% <br> * (Playspace's weather modifier given season * (Cat's seasonal modifier factor)% + 100)%"]
        VisitProb --> Draw{Draw and decide if the cat is visiting}
    end

    Start(("For each playspace at each tick"))
    Start --> CatSelect
    NoVisit([No cat visits])
    CanCatVisit --> |No| NoVisit
    Draw --> |Yes| Visit([Cat visits])
    Draw --> |No| NoVisit
    PlayspaceOnCat --> CatSelect
    CatRelations --> CatSelect
    PlayspaceConflicts --> CanCatVisit
    Food --> VisitProb
    Charm --> VisitProb
    PlayspaceWeather --> VisitProb
    CatWeather --> VisitProb


%%   mermaid-diagram
flowchart TB
    subgraph GameStates["Game States"]
        ExistingCat["Currently Playing Cats at the Goodie"]
        DamageState["Goodie Damage State"]
        FoodType["Food Type"]
        IsIndoor["Is Indoor"]
        Weather["Weather Condition<br>aka Season"]
        IsIndoor --> Weather
        CatType["Cat Type (rare/not rare)"]
    end

    subgraph Factors["Game Constants"]
        ExistingCat["Currently Playing Cats at the Goodie"] --> CatRelations["Cat Relationship Modifier<br>aka Cat vs cat weights<br>aka Cat Interaction"]
        DamageState["Goodie Damage State"] --> PlayspaceOnCat["Playspace Cat Attraction Weights<br>aka Cat weights"]
        PlayspaceConflicts["Playspace Conflicting Playspaces<br> aka Conflicts"]
        FoodType["Food Type"] --> Food["Cat Visit Chance<br>aka Food Staying Power<br>aka Cat Food Multiplier"]
        Charm["Playspace Charm"]
        Weather["Weather Condition<br>aka Season"]-->PlayspaceWeather["Playspace Weather Modifier"]
        CatWeather["Cat Seasonal Modifier Factor"]
        FoodType --> MementoRate["Mememnto Rate"]
        MementoLocMul["Memento Location Multiplier"]
        MementoCatDiscount["Memento Cat Discount"]
    end

    subgraph VisitCalculations["Visit Calculations"]
        CatSelect["Cat Selection<br><br>The algo first selects one cat.<br><br>1. (Compute cat relationship modifier) For each of the cat weight, multply it by (100 + the sum of all the other playing cats' cat vs cat weights)%.<br>2. Do a weighted draw using the new weights."] --> 
        CanCatVisit{"Can this cat visit?<br><br>All conditions below must be true.<br>- Playspace is empty.<br>- Playspace conflicting spaces are empty.<br>- NOT(Playspace is food AND playspace is indoors) (indoor food does not attract cats).<br>- Selected cat is not in cooldown.<br>- Selected cat is not playing in other places."}
        CanCatVisit --> |Yes| VisitProb["Visit Probability<br><br>The game then determines if selected cat will visit.<br><br>The chance is given by (Visit Chance)% <br> * (Playspace Charm)% <br> * (Playspace's weather modifier given season * (Cat's seasonal modifier factor)% + 100)%"]
        VisitProb --> Draw{Draw and decide if the cat is visiting}
    end

    subgraph MementoDraw["Mememto Draw"]
        MementoChance["Memento Chance"]
    end

    Start(("For each playspace at each tick"))
    Start --> CatSelect
    NoVisit([No cat visits])
    CanCatVisit --> |No| NoVisit
    Draw --> |Yes| Visit[Cat visits]
    Draw --> |No| NoVisit
    Visit --> MementoChance
    PlayspaceOnCat --> CatSelect
    CatRelations --> CatSelect
    PlayspaceConflicts --> CanCatVisit
    Food --> VisitProb
    Charm --> VisitProb
    PlayspaceWeather --> VisitProb
    CatWeather --> VisitProb



    IsIndoor --> MementoLocMul
    CatType --> MementoCatDiscount
    MementoRate --> MementoChance
    MementoLocMul --> MementoChance
    MementoCatDiscount --> MementoChance

    Visit -->|Update| GameStates